name: Create Release
on:
    push:
    workflow_dispatch:
    schedule:
        - cron: '0 9 * * 1'
jobs:
    version:
        name: Increment Version
        timeout-minutes: 10
        runs-on: ubuntu-latest
        outputs:
            NEW_VERSION: ${{ steps.incrementVersion.outputs.NEW_VERSION }}
            LATEST_TAG_NAME: ${{ steps.getSimpleIconsVersion.outputs.latest_tag_name }}
            LATEST_RELEASE_NAME: ${{ steps.getSimpleIconsVersion.outputs.latest_release_name }}
            PREVIOUS_VERSION: ${{ steps.getSimpleIconsVersion.outputs.previous_version }}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Get Simple Icons version and release name plus previous version of icon pack
              id: getSimpleIconsVersion
              run: |
                simple_icons_release_data="$(curl --retry 5 -s https://api.github.com/repos/simple-icons/simple-icons/releases/latest)"
                echo "latest_tag_name=$(echo "$simple_icons_release_data" | jq -r '.tag_name')" >> $GITHUB_OUTPUT
                echo "latest_release_name=$(echo "$simple_icons_release_data" | jq -r '.name')" >> $GITHUB_OUTPUT
                echo "previous_version=$(jq -r '.Version' template/manifest.json)" >> $GITHUB_OUTPUT

            - name: Update manifest.json version and README.md
              id: incrementVersion
              if: ${{ steps.getSimpleIconsVersion.outputs.previous_version != steps.getSimpleIconsVersion.outputs.latest_tag_name }}
              run: |
                sed -i "s/\"Version\": \".*\"/\"Version\": \"${{ steps.getSimpleIconsVersion.outputs.latest_tag_name }}\"/g" template/manifest.json
                sed -i 's/${{ steps.getSimpleIconsVersion.outputs.previous_version }}/${{ steps.getSimpleIconsVersion.outputs.latest_tag_name }}/g' README.md

            - name: Show changed files for testing
              run: |
                cat template/manifest.json
                cat README.md

    build:
        name: Build Icon Pack
        needs: version
        runs-on: windows-latest
        steps:
            - env:
                NEW_VERSION: ${{ needs.version.outputs.NEW_VERSION }}
              run: |
                echo "NEW_VERSION=${{ env.NEW_VERSION }}" >> $GITHUB_ENV

            - name: Checkout Repo
              uses: actions/checkout@v3

            - name: Echo variables # to test variable passing to windows runner
              run: |
                echo "NEW_VERSION=${{ env.NEW_VERSION }}"
                echo "LATEST_TAG_NAME=${{ needs.version.outputs.LATEST_TAG_NAME }}"
                echo "LATEST_RELEASE_NAME=${{ needs.version.outputs.LATEST_RELEASE_NAME }}"
                echo "PREVIOUS_VERSION=${{ needs.version.outputs.PREVIOUS_VERSION }}"

    release:
        name: Create new Release
        needs: build
        if: ${{ needs.version.outputs.NEW_VERSION != needs.version.outputs.PREVIOUS_VERSION }}
        runs-on: ubuntu-latest
        steps:
            - name: Do nothing
              run: |
                echo "TODO: Create a new release with the new version number"